
mixin disqus
  #disqus_thread
  script(type="text/javascript")
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'jiyinyiyong';
    // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script');
        dsq.type = 'text/javascript';
        dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        if (document.getElementsByTagName('head')[0]) {
          document.getElementsByTagName('body')[0].appendChild(dsq);
        }
    })();
  noscript
    span Please enable JavaScript to view the
    a(href="http://disqus.com/?ref_noscript") comments powered by Disqus.
  a.dsq-brlink(href="http://disqus.com")
    span comments powered by
    span.logo-disqus

mixin list-item
  .list-item
    .logo Demo
    .text text Demo

mixin card-list
  .list
    mixin list-item
    mixin list-item
    mixin list-item
    mixin list-item
    mixin list-item

mixin less-info
  .less-info
    .logo logo Demo
    .words
      p name
      p age
      p loves

mixin more-info
  .more-info
    .info
      p more about info
      p so, this it a Demo

mixin home
  .home
    mixin less-info
    mixin more-info

mixin drag
  .drag-area
    .page
      span this is a web page
      .inside
        span something inside a page
        #can-drag drag ,this
      .others
        span something else
    .out
      span drop that here

doctype 5
html
  head
    title 嵌套的 div
    meta(charset='utf-8')
    //- script(src='http://192.168.1.102:7777/doodle.js')
    link(rel='stylesheet',href='page.css')
    script(src='handle.js')
  body
    #wrap
      .header 最初的想法
      .section
        p 这个想法在我会点技术前就萌生了, 以至于有些惊奇当时的点子现在如何如何
        p
          span 后来我用文本多次描述过,
          a(href='http://jiyinyiyong.github.com/blog/posts/120725-里坊-网页的嵌套.html').
            比如旧的博客上
          span , 或者更早的笔记上

        p 最开始很清晰, 网页上的部件是独立的, 这是所有人都能一致地理解的
        p 那么一个拖拽的动作对应元素被摘取, 就像剪报, 或者剪葡萄. 首先效果是可行的
        .card
          mixin drag
        p 借助此类功能, 可以重新排列网页上的内容, 并保存在本地做其他使用
        p 这放在 Windows8 的开始菜单上就好懂了, 一个导航栏需要能重排的
        a.img(href='http://mashable.com/2012/10/25/windows-8-overview/',
            title='picture from Mashable'): img(src='../pic/metro.jpeg')
        p 之后, 我可以从每个网页上取下不同的片段, 放到一起拼凑成为一张页面
        p
          span 结果那段时间我着迷叫做
          a(href='http://zh.wikipedia.org/wiki/Widget') Widget
          span 的技术, 用在网页上提供漂亮的挂件, 并自动更新
        p 而现在桌面甚至移动平台都很流行这种挂件了, 当时就是这么喜欢
        a.img(href='http://www.techradar.com/news/phone-and-communications/mobile-phones/20-best-android-widgets-965387',
          title='picture from techrepublic')
          img(src='../pic/android.jpg')
        p 相对来说, 现在的挂件和我想的不同在于, 我需要进行嵌套

      .header 开始嵌套 DIV
      .section
        p 在网页中, 嵌套是常见的, 只不过, 用 HTML 写出来效果并不好, 或者说 CSS
        p
          span 我这里用了
          a(href='http://www.zhangxinxu.com/wordpress/2010/12/css-box-flex属性，然后弹性盒子模型简介/')
            code -webkit-box
          span 这个私有属性, 此外
          a(href='http://benfrain.com/understanding-the-css3-flexbox-flexible-box-layout-module/')
            code flexbox
          span 依然在演进
        p 在 Chrome 以外浏览器或者时间长了错乱了也在预料之中. 总之能这样布局
        .uri /index.html
        .card#card-1
          mixin home
          mixin card-list
        p
          span 难点在于,
          a(href='http://www.w3.org/People/Raggett/book4/ch02.html').
            HTML 当初可不是那么设计的
          span , 如果我想写, 几乎要重复一边所有细节
        p 如果在一门编程语言里遇到有相同的代码要重复多遍, 恐怕不需要犹豫, 用函数
        p
          span 因此后端的模板引擎总有办法对付这个问题, 比如
          a(href='http://naltatis.github.com/jade-syntax-docs/#mixin').
            Jade
          span 提供的
          a(href='https://github.com/visionmedia/jade#a13') Include
          span 和
          a(href='https://github.com/visionmedia/jade#a14') Mixin
        p 而且实时上我的代码尝试这样生成了, 重复的代码用一个函数重复调用
        .img
          img(src='../pic/code.png')
        p
          span 那么借助 Jade 和
          a(href='http://slim-lang.com/') Slim
          span , HTML 编写过程中的嵌套和代码复用基本可行了
        p 在 MVC 模式的服务端中, 网页就是通过模板的嵌套和组合来完成渲染的
      
      .header 进一步的想法
      .section
            
        p 那么我想更具体地, 提供一些更细节的 URL 来允许网页的局部能被请求和加载
        p
          span 单纯请求的实现是简单的, 只要定义相应 GET 请求的
          code pathname
          span 能返回 HTML 即可
        p 比如下面的例子, 对单独的 DIV 组件给出路径, 每个部分能被单独请求
        .uri /list.html
        .card
          mixin card-list
        .uri /item.html
        .card#card-3
          mixin list-item
        .uri /info.html
        .card
          mixin home
        p
          span 那么
          span.uri /info.html
          span 之下的 DIV 我就不罗列了, 可以在
          a(href='http://expressjs.com/') Express
          span 里写出来
        p 另外实用的还有浏览器端 MVC 框架和浏览器端模板引擎的方案, 但这里不考虑
          
      .header 继续扩展到客户端
      .section
      
        p 当服务器肯给出局部的页面, 自然会考虑在浏览器端进行拼装, 形成网页
        .card#card-4
          mixin home
          mixin card-list
          #mask
            span.hint-info.uri /info.html
            span.hint-list.uri /list.html
            span.hint-item.uri /item.html
            span.hint-item.uri#hint-item2 /item.html
            span.hint-item.uri#hint-item3 /item.html
        p 这就需要有相应技术在网页内嵌入网页, 而不只是 HTML 网页再渲染到 DIV
        p 同时编写页面的语法中, 就隐含了将代码本身作为引入代码的框架结构
        p
          span 比如
          - var tag = '<iframe>'
          code= tag
          span 就能嵌入网页. 再者, 其中也应该有 JS 环境在运行
        p
          span 所以我想: 
          b 每个嵌入的网页都是 Object, 对外暴露接口, 内部含有私有数据
        p 另外可增加一些选项让网页能更多样的功能:
        ul
          li 内嵌页面可以知道自己的层级和大小, 以便隐藏更一些深层的网页
          li 页面可以循环包含, 在显示时默认不会展开全部层级页面
          li 有进入子页面, 返回上级页面, 跳转相应页面等选项
          
      .header 网络是城市
      .section
        
        p
          span 上面几点细节出来之前, 发生的一件事情是豆瓣的
          a(href='http://alphatown.com/') 阿尔法城
          span 开始了测试
        p 随着时间我越发感到网络该是城市, 是世界, 而不是用来生产搜索推荐结果的机器
        a.img(href='http://site.douban.com/widget/notes/3420186/note/155306775/')
         img(src='../pic/douban.jpg')
        p 我发现阿尔法城缺少一种嵌套的自由, 于是结合之前所想开始想象嵌套
        p 试想, 你进入城市, 到街道, 到大厦, 到楼层, 到房间, 而在网上有着无限的维度
        p 曾经人们需要用链接打开一个个页面才能展开新的空间看新的事物
        p 而我的模型通向更多样的方位, 可以想象等人机交互更成熟, 其中如何导航
        
      .header 关于模块化
      .section
        p 另外每个页面是一个单独的环境让 JS 运行, 我觉得模块化上就更清晰了
        p 当然, 这种情况下需要更多跨页面通信的技术, 我想还是超乎现实的
        p 也许, 我说也许, 可以有新的语言跳过 HTML/CSS/JS , 尝试去看别样的一个未来
        .card#arch
          .implement
            .files
              .js remote files
              .js local files
              .js remote files
            .env engine & environment
            .core
              .net net
              .graphic graphic
          .script single language
        p 关于维护多个并行的环境并相互传递参数的架构我还没接触到, 大概是并行
        p 总之我觉得那是一个不错的未来, 每个标签作为对象.. 期待吧
         
      mixin disqus