;(function(e,t,n){function i(n,s){if(!t[n]){if(!e[n]){var o=typeof require=="function"&&require;if(!s&&o)return o(n,!0);if(r)return r(n,!0);throw new Error("Cannot find module '"+n+"'")}var u=t[n]={exports:{}};e[n][0](function(t){var r=e[n][1][t];return i(r?r:t)},u,u.exports)}return t[n].exports}var r=typeof require=="function"&&require;for(var s=0;s<n.length;s++)i(n[s]);return i})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
var dom, post_list;

post_list = require("./data");

console.log(post_list);

dom = require("./dom");

window.onload = function() {
  dom.render_list(post_list.by_sort);
  dom.bind_top(function() {
    return dom.render_list(post_list.by_sort);
  });
  dom.bind_new(function() {
    return dom.render_list(post_list.by_time);
  });
  return dom.bind_list(function(event) {
    var tag;

    tag = event.target;
    switch (tag.className) {
      case "title":
        return dom.render_post(tag);
      case "link":
        return dom.open_link(tag.innerText);
    }
  });
};

},{"./data":2,"./dom":3}],4:[function(require,module,exports){
// nothing to see here... no file methods for the browser

},{}],5:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            if (ev.source === window && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],6:[function(require,module,exports){
(function(process){function filter (xs, fn) {
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (fn(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length; i >= 0; i--) {
    var last = parts[i];
    if (last == '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Regex to split a filename into [*, dir, basename, ext]
// posix version
var splitPathRe = /^(.+\/(?!$)|\/)?((?:.+?)?(\.[^.]*)?)$/;

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
var resolvedPath = '',
    resolvedAbsolute = false;

for (var i = arguments.length; i >= -1 && !resolvedAbsolute; i--) {
  var path = (i >= 0)
      ? arguments[i]
      : process.cwd();

  // Skip empty and invalid entries
  if (typeof path !== 'string' || !path) {
    continue;
  }

  resolvedPath = path + '/' + resolvedPath;
  resolvedAbsolute = path.charAt(0) === '/';
}

// At this point the path should be resolved to a full absolute path, but
// handle relative paths to be safe (might happen when process.cwd() fails)

// Normalize the path
resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
var isAbsolute = path.charAt(0) === '/',
    trailingSlash = path.slice(-1) === '/';

// Normalize the path
path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }
  
  return (isAbsolute ? '/' : '') + path;
};


// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    return p && typeof p === 'string';
  }).join('/'));
};


exports.dirname = function(path) {
  var dir = splitPathRe.exec(path)[1] || '';
  var isWindows = false;
  if (!dir) {
    // No dirname
    return '.';
  } else if (dir.length === 1 ||
      (isWindows && dir.length <= 3 && dir.charAt(1) === ':')) {
    // It is just a slash or a drive letter with a slash
    return dir;
  } else {
    // It is a full dirname, strip trailing slash
    return dir.substring(0, dir.length - 1);
  }
};


exports.basename = function(path, ext) {
  var f = splitPathRe.exec(path)[2] || '';
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPathRe.exec(path)[3] || '';
};

exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

})(require("__browserify_process"))
},{"__browserify_process":5}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
var a, article_list, data, fs, list, path, value, _;

fs = require("fs");

path = require("path");

article_list = ["./posts/about-coder-news", "./posts/future-of-UI", "./posts/why-collect-links", "./posts/love-languages", "./posts/join-communities", "./posts/everyone-gets-old", "./posts/you-and-me-different", "./posts/about-this-site"];

a = "./posts/about-coder-news";

require(a);

data = {
  0: require("./posts/about-coder-news"),
  1: require("./posts/future-of-UI"),
  2: require("./posts/why-collect-links"),
  3: require("./posts/love-languages"),
  4: require("./posts/join-communities"),
  5: require("./posts/everyone-gets-old"),
  6: require("./posts/you-and-me-different"),
  7: require("./posts/about-this-site"),
  8: {
    title: "提议: 我们变通下 HN 的方式, 在 Github 上创建一个技术论坛",
    link: "http://v2ex.com/t/65472"
  }
};

list = (function() {
  var _results;

  _results = [];
  for (_ in data) {
    value = data[_];
    _results.push(value);
  }
  return _results;
})();

exports.by_time = list;

exports.by_sort = list.concat().sort(function(a, b) {
  if (a.title > b.title) {
    return 1;
  } else {
    return -1;
  }
});

console.log(list);

},{"fs":4,"path":6,"./posts/about-coder-news":7,"./posts/future-of-UI":8,"./posts/love-languages":9,"./posts/join-communities":10,"./posts/everyone-gets-old":11,"./posts/you-and-me-different":12,"./posts/about-this-site":13,"./posts/why-collect-links":14}],7:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
exports.title = "我发帖讲关于 Coder News 这个名字的经历";

exports.content = "";

},{}],8:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
exports.title = "漂亮的 UI 是网页发展的方向";

exports.content = "";

},{}],9:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
exports.title = "编程语言的爱好, 的生活态度";

exports.content = "";

},{}],10:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
exports.title = "让人羡慕的社区";

exports.content = "";

},{}],11:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
exports.title = "人总是要衰老的, 变得和自己想的不一样, 变得成熟";

exports.content = "";

},{}],12:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
exports.title = "世界上有的人强, 有的人弱, 事情就是这样";

exports.content = "";

},{}],13:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
exports.title = "关于现在这个页面, 为什么要搭建这个页面";

exports.content = "晚上认真看了几个篇新闻, 都是 Startup News 上的, 有点被打动\n本来吃过晚饭出门, 就有种三更半夜行走在学校的不安的感觉了\n昏昏沉沉地看着文章, 联想到一些, 就在下边加评论做提示\n看到 V2EX 扯过的 @Hit9 链接都被放到上边了, 马上搜到 Github\n一想, Startup News 上评论的人太少了, 依然没有效果呀\n\n我看的几篇文章多多少少提到社区, 而我对此越发感到憧憬着\n这时候真有些无奈, 想到界面的设计, 就好像把之前没做的做出来\n晚上忙着搭框架, 断续一个多小时, coffee 的框架基本完成了\n眼看现在已经过了凌晨, 我真没力气再安心折腾下去\n有些事情会是一时伤感, 兴起去做, 兴尽而止, 希望这不是";

},{}],14:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
exports.title = "为什么要搜集资源, 收集资源的弊端, 我应该怎么做";

exports.content = "";

},{}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
var auther, css, html, q, render_title, _ref;

_ref = require("lilyturf"), html = _ref.html, css = _ref.css;

q = function(query) {
  return document.querySelector(query);
};

Element.prototype.q = function(query) {
  return this.querySelector(query);
};

auther = {
  name: "jiyinyiyong",
  avatar: "http://photos.tuchong.com/108934/f/2159629.jpg"
};

render_title = function(post) {
  return html(function() {
    return this.div({
      "class": "post"
    }, this.img({
      "class": "avatar",
      src: auther.avatar,
      title: auther.name
    }), this.div({
      "class": "item"
    }, this.div({
      "class": "title",
      data: post.content
    }, post.title), this.span({
      "class": "link"
    }, post.link != null ? post.link : "self")));
  });
};

exports.render_list = function(post_list) {
  var list;

  list = q("#list");
  return list.innerHTML = html(function() {
    return this.div({
      "class": "container"
    }, post_list.map(render_title).join(""));
  });
};

exports.bind_list = function(callback) {
  var list;

  list = q("#list");
  return list.onclick = callback;
};

exports.render_post = function(tag) {
  q("#title").innerText = tag.innerText;
  q("#content").innerText = tag.content || "";
  if (tag.link) {
    q(".link").innerText = tag.link;
    return q(".link").href = "http://" + tag.link;
  }
};

exports.open_link = function(link) {
  if (link.match(/\w\.\w/)) {
    return window.open(link);
  }
};

exports.bind_top = function(callback) {
  return q(".menu .top").onclick = callback;
};

exports.bind_new = function(callback) {
  return q(".menu .new").onclick = callback;
};

},{"lilyturf":15}],15:[function(require,module,exports){
// Generated by CoffeeScript 1.6.2
var css, css_tools, html_scope, html_tools, pair_elems, resolve, single_elems,
  __slice = [].slice;

html_scope = {};

pair_elems = "head title body script  div nav header footer section article  p span textarea br pre code a address b backquote  button font frame form hr i  ul li ol table tr td th title  canvas audio video select style".split(/\s+/);

single_elems = "img meta input link iframe audio video".split(/\s+/);

html_tools = {
  attrs: function(obj) {
    var attrs, key, value;

    attrs = "";
    for (key in obj) {
      value = obj[key];
      attrs += " " + key + "='" + value + "'";
    }
    return attrs;
  },
  text: function(text) {
    return text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\s/g, "&nbsp;");
  }
};

resolve = function(list) {
  var elem, obj;

  obj = {};
  elem = [];
  list.forEach(function(item) {
    var key, that, value, _i, _len, _results, _results1;

    if (item != null) {
      if (item.__proto__ === Object.prototype) {
        _results = [];
        for (key in item) {
          value = item[key];
          _results.push(obj[key] = value);
        }
        return _results;
      } else if (item.__proto__ === Array.prototype) {
        _results1 = [];
        for (_i = 0, _len = item.length; _i < _len; _i++) {
          that = item[_i];
          _results1.push(elem.push(that));
        }
        return _results1;
      } else {
        return elem.push(item);
      }
    }
  });
  return [obj, elem];
};

pair_elems.map(function(tag) {
  return html_scope[tag] = function() {
    var list, obj, _ref;

    list = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    _ref = resolve(list), obj = _ref[0], list = _ref[1];
    return "<" + tag + (html_tools.attrs(obj)) + ">" + (list.join("")) + "</" + tag + ">";
  };
});

single_elems.map(function(tag) {
  return html_scope[tag] = function(obj) {
    if (obj == null) {
      obj = {};
    }
    return "<" + tag + (html_tools.attrs(obj)) + "/>";
  };
});

html_scope.html = function(string) {
  return string;
};

html_scope.text = html_tools.text;

css_tools = {
  template: function(base, selector, declaration) {
    return "" + base + " " + selector + "{\n" + declaration + "\n}\n";
  },
  utils: {
    hsl: function(h, s, l) {
      return "hsl(" + h + ", " + s + "%, " + l + "%)";
    },
    hsla: function(h, s, l, a) {
      return "hsl(" + h + ", " + s + "%, " + l + "%, " + a + ")";
    }
  },
  type: function(value) {
    var match, string;

    match = Object.prototype.toString.call(value).match(/\s\w+/);
    string = match[0].slice(1);
    return string.toLowerCase();
  },
  pretty: function(char) {
    if (char.match(/^[A-Z]$/) != null) {
      return "-" + char.toLowerCase();
    } else {
      return char;
    }
  }
};

css = function(generator) {
  var data, style, write_rule;

  style = "";
  css_tools.utils.generator = generator;
  data = css_tools.utils.generator();
  write_rule = function(base, data) {
    var attribute, declaration, nest_selector, nested, plain, rule, selector, value, values, _i, _len, _results;

    nested = {};
    for (selector in data) {
      declaration = data[selector];
      plain = [];
      for (attribute in declaration) {
        value = declaration[attribute];
        if ((css_tools.type(value)) === "object") {
          nest_selector = "" + base + " " + selector;
          if (nested[nest_selector] == null) {
            nested[nest_selector] = {};
          }
          nested[nest_selector][attribute] = value;
        } else {
          attribute = attribute.split("").map(css_tools.pretty).join("");
          if ((css_tools.type(value)) === "number") {
            value = "" + value + "px";
          }
          if ((css_tools.type(value)) === "array") {
            values = value;
            for (_i = 0, _len = values.length; _i < _len; _i++) {
              value = values[_i];
              plain.push("  " + attribute + ": " + value + ";");
            }
          } else {
            plain.push("  " + attribute + ": " + value + ";");
          }
        }
      }
      if (plain.length > 0) {
        declaration = plain.join("\n");
        rule = css_tools.template(base, selector, declaration);
        style += rule.trimLeft();
      }
    }
    if ((Object.keys(nested)).length > 0) {
      _results = [];
      for (base in nested) {
        data = nested[base];
        _results.push(write_rule(base, data));
      }
      return _results;
    }
  };
  write_rule("", data);
  return style;
};

exports.html = function(generator) {
  return generator.call(html_scope);
};

exports.css = function(data) {
  return css(data);
};

},{}]},{},[1])
//@ sourceMappingURL=data:application/json;base64,
;