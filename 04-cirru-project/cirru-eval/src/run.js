// Generated by CoffeeScript 1.4.0
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(function(require, exports) {
  var error, gen, global, isArr, isNum, isStr, macro, read, show, spawn;
  isArr = Array.isArray;
  isStr = function(item) {
    return typeof item === 'string';
  };
  isNum = function(item) {
    return typeof item === 'number';
  };
  gen = JSON.stringify;
  show = function() {};
  error = function(info) {
    throw new Error(info);
  };
  spawn = function(scope) {
    var child;
    child = {};
    show('before spawn:', gen(child));
    child.__proto__ = scope;
    show('spawn:', gen(child));
    return child;
  };
  read = function(scope, list) {
    var head, name;
    show('$read:', list);
    if (isArr(list)) {
      head = list[0];
      name = isStr(head) ? head : error('head should be string');
      return scope[name](scope, list.slice(1));
    } else if (isStr(list)) {
      return scope[list];
    } else {
      return 'cant handle strange type';
    }
  };
  macro = function(scope, list) {
    var head, ret;
    if (list.length === 0) {
      return [];
    } else {
      head = list[0];
      if (head === '~not~macro') {
        show('~not~macro');
        return read(scope, list.slice(1));
      } else {
        ret = [];
        list.forEach(function(item) {
          if (isStr(item)) {
            return ret.push(item);
          } else {
            return ret.push(macro(scope, item));
          }
        });
        return ret;
      }
    }
  };
  global = {
    ' stdout': [],
    ' clear': function(scope, list) {
      return global[' stdout'] = [];
    },
    number: function(scope, list) {
      var head;
      show('number:', list);
      head = list[0];
      return Number(head);
    },
    print: function(scope, list) {
      var ret;
      show('print:', list);
      ret = list.map(function(item) {
        return read(scope, item);
      });
      return global[' stdout'].push(ret);
    },
    string: function(scope, list) {
      var head;
      show('string:', list);
      head = list[0];
      return String(head);
    },
    list: function(scope, list) {
      show('list:', list);
      return list.map(function(item) {
        return read(scope, item);
      });
    },
    json: function(scope, list) {
      var obj;
      show('json:', list);
      obj = {};
      list.forEach(function(pair) {
        return obj[pair[0]] = read(scope, pair[1]);
      });
      return obj;
    },
    set: function(scope, list) {
      var name, value;
      show('set:', list);
      name = list[0];
      value = read(scope, list[1]);
      scope[name] = value;
      return value;
    },
    get: function(scope, list) {
      var name;
      show('get:', list);
      name = list[0];
      return scope[name];
    },
    add: function(scope, list) {
      var data;
      show('add:', list);
      data = list.map(function(item) {
        return read(scope, item);
      });
      return data.reduce(function(x, y) {
        return x + y;
      });
    },
    minus: function(scope, list) {
      var data;
      show('minus:', list);
      data = list.map(function(item) {
        return read(scope, item);
      });
      return data.reduce(function(x, y) {
        return x - y;
      });
    },
    self: function(scope, list) {
      show('self:', list);
      return scope;
    },
    under: function(scope, list) {
      var child, data, key, value;
      show('under:', list);
      child = spawn(scope);
      data = read(scope, list[0]);
      for (key in data) {
        value = data[key];
        child[key] = value;
      }
      list.slice(1).forEach(function(item) {
        return read(child, item);
      });
      return child;
    },
    inside: function(scope, list) {
      var child;
      child = read(scope, list[0]);
      child.__proto__ = scope;
      list.slice(1).forEach(function(item) {
        return read(child, item);
      });
      return child;
    },
    expose: function(scope, list) {
      var func, name;
      show('expose:', list);
      name = list[0];
      func = list[1];
      return scope[func] = function(child, paras) {
        return scope[name] = read(child, paras[0]);
      };
    },
    define: function(scope, list) {
      var args, name;
      show('define:', list);
      name = list[0][0];
      args = list[0].slice(1);
      return scope[name] = function(place, paras) {
        var child, index, ret;
        show("use define.d " + name + ":", scope);
        index = 0;
        child = spawn(scope);
        args.forEach(function(item) {
          child[item] = read(place, paras[index]);
          return index += 1;
        });
        ret = void 0;
        list.slice(1).forEach(function(item) {
          return ret = read(child, item);
        });
        return ret;
      };
    },
    task: function(scope, list) {
      var args, name;
      show('task:', list);
      name = list[0][0];
      args = list[0].slice(1);
      return scope[name] = function(place, paras) {
        var child, index, ret;
        show("use macro " + name + ":", scope);
        index = 0;
        child = spawn(place);
        args.forEach(function(item) {
          child[item] = read(place, paras[index]);
          return index += 1;
        });
        ret = void 0;
        list.slice(1).forEach(function(item) {
          return ret = read(child, item);
        });
        return ret;
      };
    },
    lambda: function(scope, list) {
      var args;
      show('lambda:', list);
      args = list[0];
      return function(place, paras) {
        var child, index, ret;
        show("use lambda:", scope);
        index = 0;
        child = spawn(scope);
        args.forEach(function(item) {
          child[item] = read(place, paras[index]);
          return index += 1;
        });
        ret = void 0;
        list.slice(1).forEach(function(item) {
          return ret = read(child, item);
        });
        return ret;
      };
    },
    data: function(scope, item) {
      show('data:', item);
      return item;
    },
    each: function(scope, list) {
      var data, func, ret;
      show('each:', list);
      data = read(scope, list[0]);
      func = read(scope, list[1]);
      ret = void 0;
      data.forEach(function(item) {
        return ret = func(scope, [['data', item]]);
      });
      return ret;
    },
    pair: function(scope, list) {
      var data, func, key, ret, value;
      show('pair:', list);
      data = read(scope, list[0]);
      func = read(scope, list[1]);
      for (key in data) {
        value = data[key];
        ret = func(scope, [['data', key], ['data', value]]);
      }
      return ret;
    },
    "do": function(scope, list) {
      var ret;
      show('do:', list);
      ret = void 0;
      list.forEach(function(item) {
        return ret = read(scope, item);
      });
      return ret;
    },
    bool: function(scope, list) {
      var value;
      show('bool:', list);
      value = list[0];
      if (__indexOf.call('yes ok fine good true on 1'.split(' '), value) >= 0) {
        return true;
      } else if (__indexOf.call('no false off bad 0'.split(' '), value) >= 0) {
        return false;
      } else {
        return void 0;
      }
    },
    "if": function(scope, list) {
      var exp, ret, when_no, when_yes;
      show('if:', list);
      exp = list[0];
      when_yes = list[1];
      when_no = list[2];
      ret = void 0;
      if (read(scope, exp)) {
        return read(scope, when_yes);
      } else if (when_no != null) {
        return read(scope, when_no);
      }
    },
    smaller: function(scope, list) {
      var item, num, stack, _i, _len;
      show('smaller:', list);
      stack = void 0;
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        item = list[_i];
        num = read(scope, item);
        if (stack != null) {
          show('smaller:', num, stack);
          if (num <= stack) {
            return false;
          }
        }
        stack = num;
      }
      return true;
    },
    larger: function(scope, list) {
      var item, num, stack, _i, _len;
      show('larger:', list);
      stack = void 0;
      for (_i = 0, _len = list.length; _i < _len; _i++) {
        item = list[_i];
        num = read(scope, item);
        if (stack != null) {
          if (num >= stack) {
            return false;
          }
        }
        stack = num;
      }
      return true;
    },
    read: function(scope, list) {
      var value;
      show('read:', list);
      value = read(scope, list[0]);
      show('read value:', value);
      return read(scope, value);
    },
    select: function(scope, list) {
      var obj, point;
      show('select:', list);
      obj = read(scope, list[0]);
      point = read(scope, list[1]);
      if (isNum(point)) {
        point -= 1;
      }
      return obj[point];
    },
    put: function(scope, list) {
      var obj, point, value;
      show('put:', list);
      obj = read(scope, list[0]);
      point = read(scope, list[1]);
      if (isNum(point)) {
        point -= 1;
      }
      value = read(scope, list[2]);
      return obj[point] = value;
    },
    mess: function(scope, list) {
      var ret;
      show('mess:', list);
      ret = macro(scope, list);
      show('mess result:', ret);
      return ret;
    },
    "eval": function(scope, list) {
      var value;
      show('eval:', list);
      value = read(scope, list[0]);
      return read(scope, read(scope, value[0]));
    }
  };
  exports.run = function(scope, list) {
    show('\nrun global:', list);
    scope.__proto__ = global;
    scope[' clear']();
    list.forEach(function(item) {
      return read(scope, item);
    });
    return scope;
  };
});
