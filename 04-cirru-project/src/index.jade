mixin disqus
  #disqus_thread
    script(type="text/javascript")
      /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
      var disqus_shortname = 'jiyinyiyong';
      // required: replace example with your forum shortname

      /* * * DON'T EDIT BELOW THIS LINE * * */
      (function() {
          var dsq = document.createElement('script');
          dsq.type = 'text/javascript';
          dsq.async = true;
          dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
          if (document.getElementsByTagName('head')[0]) {
            document.getElementsByTagName('body')[0].appendChild(dsq);
          }
      })();
    noscript
      span Please enable JavaScript to view the
      a(href="http://disqus.com/?ref_noscript") comments powered by Disqus.
    a.dsq-brlink(href="http://disqus.com")
      span comments powered by
      span.logo-disqus

mixin pair(n)
  - var editor_name = 'editor-' + n
  - var result_name = 'result-' + n
  .pair
    .cirru-editor(id='#{editor_name}')
    .result(id="#{result_name}")

doctype 5
html
  head
    title template
    meta(charset='utf-8')
    //- script(src='http://192.168.1.104:7777/doodle.js')
    link(rel='stylesheet',href='page.css')
    link(rel='stylesheet',href='../../../cirru-editor/src/cirru-editor.css')
    script(src='../../../cirru-editor/sea-modules/seajs/1.3.0-dev/sea.js')
    script
      seajs.use('./handle')
      seajs.use('./editor')
  body
    #wrap
      canvas(width='960px',height='400px')#logo
      .title 关于 cirru project 的意图
      p 早时候想学写解释器, 因为学一门语言适应别人的习惯其实很难, 不如自己做一遍
      p 马上就会发现这很难, 于是很多时光的烦恼和消磨, 偶然有所得, 努力记录在这里
      p
        span 细节的内容我会在
        a(href='https://github.com/jiyinyiyong') Github
        span 上写更多的细节, 这里主要是已经实现的部分的文档记录
      p 希望我之前的努力能带给别人方便, 更主要希望能减轻自己的困境
      p
        span 代码看
        a(href='https://github.com/jiyinyiyong/cirru-editor') cirru-editor
        span 和
        a(href='https://github.com/jiyinyiyong/cirru-eval') cirru-eval
        span 两个部分, 代码借助
        a(href='http://seajs.org/') SeaJS
        span 组织和拼接到一起
      p 虽然说解释器, 主体还是对于 JS 各种数据类似的封装, 会 JS 的话直接开始看例子吧
      .title 关于编辑器的使用
      p 如果感兴趣, 可以下载编辑器模块代码, 参考例子搭建. 这里讲界面用法
      p
        span 方向键和几个
        code ctrl+
        span 的复制粘贴快捷键我模拟了一下, 另外
        code ctrl+m
        span 用来输入中文
      p 点击一块变成蓝色之后, 按下字母数字就能看到反应, 而回车键用来创建嵌套
      p 嵌套是 Cirru 的核心. 方向键和翻页键虽然不够强大, 但还是会频繁被用到
      p 编辑了代码之后, 点击对应红色查看运行结果. 只能算个例子吧, 很多情况会出错的
      p
        span 输出的结果是
        code global
        span 作用域当中的内容, 另外就是一数字形式输出的
        code print
        
      .title 基本的字符串数字和打印
      p Cirru 不用符号来区别不同的数据类型, 需要用单词声明其对应 JS 的类型
      mixin pair(0)
      
      .title 设置修改变量以及运算
      p 对于变量没有等号语法, 相对于 Scheme 这个还是好理解的, 这样再来运算
      p 注意变量名可以是任何字符, 空格通过制表符来进行实现, 另外空字符串比较难对付
      mixin pair(1)
      
      .title 作用域通过 JSON 实现
      p
        span 可能类似
        a(href='https://github.com/coffee-js/languages/issues/5#issuecomment-9323297').
          Flow
        span 语言. 我用对象的
        code __proto__
        span 去把作用域实现出来了, 也许有些古怪
      p 作用域作为数据结构的本身的意义就像 JS 函数能作为类型构造器参与实现新的数据形态
      p 另外我的想法是编程语言自身也应该是能被自己作为数据操作的才对, 比如作用域
      p 参考基于原型的语言中 JSON 和函数作用域的绑定的关系, 我认为这未来能发挥作用
      p
        span 代码中
        code under
        span 和
        code inside
        span 的区别在于前者创建了作用域, 而后者直接覆写了对象的键
      mixin pair(2)
      
      .title 函数和匿名函数
      p
        span 函数是语言必备的, 语法上可行, 我大概进行了测试. 注意隐式的
        code return
      p 能力原因, 列表的头部还只能是字符串, 不然下面最后一个例子里连写函数了
      p
        span 另外 JS 关系, 函数并不能在右侧输出结果的
        code global
        span 里显示出来, 所以
        code {}
        span 是空的
      mixin pair(3)
      
      .title 函数的作用域
      p 函数的意思是作用域保存为闭包, 下次调用时可以引用到闭包里的数据
      p 我好奇另一种, 比如函数局部作用域是继承在执行环境中的数据, 动态词法域?
      p
        span 我代码里的处理依然是创建了作用域, 但
        code __proto__
        span 是指向执行环境的这个对象的
      mixin pair(4)

      .title 操作和传递作用域
      p
        span 通过
        code __proto__
        span 实现的作用域修改上层作用域比较麻烦, 于是设置了
        code expose
        span 函数
      p
        span 另外, 通过
        code self
        span 函数可以取出当前函数的作用域, 取出来就是 JSON 了
      mixin pair(5)
      
      .title if 语句选择判断
      p 尝试做了一下判断, 比较简单, 那么尝试写一下递归好了
      p
        span 另外和
        code if
        span 搭配在一起用的有
        code do
        span , 否则执行多个语句就显得很不实际了
      mixin pair(6)
       
      .title 遍历列表和 JSON
      p 语法比较死板, 还需要前面的函数可用的情况下才能显示. 分开两个函数
      mixin pair(7)
      
      .title 类似 macro 之类的操作
      p 这个大概要涉及代码生成代码了. 我只是尝试做出来两个例子, 验证是否可行
      p
        code data
        span 函数将代码读取成数据, 通过
        code read
        span 可以重新作为代码执行
      p
        span 而在
        code mess
        span 函数中, 嵌入的
        code ~not~macro
        span 将会被解析为代码, 其余则解析为函数
      p
        code mess
        span 返回的结果通过
        code eval
        span 可以执行, 原本我想用
        code read
        span 统一的, 结果可以说是能力不够吧
      mixin pair(8)
      
      .title 关于进展和计划
      p 简单说就是没计划.. 我的目标是展示摆脱符号语法的可能性, 现在明显那是可行的
      p 其中出现了一些有趣的特性, 可以要成为实用的语言, 还不知道要走多少路
      p 如果有人愿意接着这个想法继续往前推进, 尽管不科学, 但那的确是我所期待的
      p
        span 单独的例子将会放到
        a(href='http://jiyinyiyong.github.com/cirru-eval/examples/') gh-pages
        span 上, 建议用 Chrome 访问, 因为兼容性比较难处理
      p
        span 发现 bug 可到
        a(href='https://github.com/jiyinyiyong/article') Issue
        span 里反馈, 虽然说我的能力未必能全修好, 总可以试试
        
      mixin disqus
